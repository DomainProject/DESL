package SimpleDES.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.core.modules.behavior.ITypeDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.traceable.behavior.UnitConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class UseM2M_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.createUnitInfo();
    // headers
    List<String> headers = ListSequence.fromList(new ArrayList<String>());
    tgs.append("#include <ROOT-Sim.h>");
    tgs.newLine();
    ListSequence.fromList(headers).addElement("ROOT-Sim");
    // exclude ROOT-Sim's topology and random
    ListSequence.fromList(headers).addElement("ROOT-Sim/topology");
    ListSequence.fromList(headers).addElement("ROOT-Sim/random");
    Headers.headers(ctx.getPrimaryInput(), headers, ctx);

    // events
    int i = 0;
    for (SNode event : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.events$uflG), CONCEPTS.EventDefinition$wO))) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "FINI" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_FINI") {
        tgs.append("#define ");
        tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL));
        tgs.append(" ");
        tgs.append(String.valueOf(++i));
        tgs.newLine();
      }
    }

    // define ROOT-Sim events and types
    tgs.append("#define LP_INIT INIT");
    tgs.newLine();
    tgs.append("#define lp_id_t unsigned int");
    tgs.newLine();
    tgs.append("#define simtime_t double");
    tgs.newLine();

    tgs.newLine();

    // macros
    Macros.macros(ctx.getPrimaryInput(), ctx);

    // what class macro
    WhatClass.whatClass(ctx.getPrimaryInput(), ctx);

    // define uint64_t and uint32_t
    tgs.append("typedef unsigned long uint64_t;");
    tgs.newLine();
    tgs.append("typedef unsigned int uint32_t;");
    tgs.newLine();
    tgs.newLine();

    // state structs
    StateStructs.stateStructs(ctx.getPrimaryInput(), ctx);

    // message struct
    tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ));

    // structs
    Structs.structs(ctx.getPrimaryInput(), ctx);

    // model_parameters definition
    tgs.append("typedef struct model_parameters {\n}model_parameters;");
    tgs.newLine();
    tgs.newLine();

    // global variables
    Configuration.configuration(ctx.getPrimaryInput(), ctx);

    // simulation_configuration variable
    tgs.append("simulation_configuration conf;");
    tgs.newLine();
    tgs.newLine();

    // model_options
    tgs.append("struct argp_option model_options = {{ 0, 0, 0, 0, 0, 0 }};");
    tgs.newLine();

    // model_parameters variable
    tgs.append("model_parameters args;");
    tgs.newLine();
    tgs.newLine();

    // model_parse_opt function
    tgs.append("error_t model_parse_opt(int key, char *arg, ");
    tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM)).findFirst((it) -> SNodeOperations.isInstanceOf(it, CONCEPTS.ClassDefinition$NR)), CONCEPTS.ClassDefinition$NR), LINKS.stateStruct$NqNO)));
    tgs.append(" *state) {return 0;}");
    tgs.newLine();
    tgs.newLine();

    // external functions definition
    ExternalFunctions.externalFunctions(ctx.getPrimaryInput(), ctx);

    if (SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL).contains("phold")) {
      tgs.append("void __attribute__ ((noinline)) busy_loop(unsigned long long max) {\n    for (unsigned long long i = 0; i < max; i++) {\n        __asm__ volatile(\"pause\" : \"+g\" (i) : :);\n    }\n}\n");
      tgs.newLine();
    }


    // ProcessEvent for each class
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.append("void ProcessEvent");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("(lp_id_t me, simtime_t now, unsigned event_type, const void *content, ");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append("* state)");
      tgs.newLine();
      tgs.append("{");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();

      for (SNode variable : ListSequence.fromList(SLinkOperations.getChildren(c, LINKS.commonVariables$AOvb))) {
        tgs.indent();
        tgs.appendNode(variable);
        tgs.newLine();
      }
      tgs.newLine();

      tgs.indent();
      tgs.append("switch(event_type) {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      for (SNode handler : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(c, LINKS.handlers$Nr2P), CONCEPTS.EventHandler$Ov)).where((it) -> SPropertyOperations.getString(it, PROPS.eventName$AHdn) != "LP_FINI")) {
        tgs.newLine();
        tgs.indent();
        tgs.append("case ");
        tgs.append(SPropertyOperations.getString(handler, PROPS.eventName$AHdn));
        tgs.append(":");
        tgs.newLine();
        ctx.getBuffer().area().increaseIndent();
        for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(handler, LINKS.function$5bPH), LINKS.body$1GE0), LINKS.statements$euTV))) {
          tgs.indent();
          tgs.appendNode(statement);
          tgs.newLine();
        }
        tgs.indent();
        tgs.append("break;");
        tgs.newLine();
        ctx.getBuffer().area().decreaseIndent();
      }

      tgs.newLine();
      tgs.indent();
      tgs.append("default:");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("fprintf(stderr, \"Unknown event type! (me = %ld - event type = %d)\", me, event_type);");
      tgs.newLine();
      tgs.indent();
      tgs.append("abort();");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();

      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      tgs.append("}");
      tgs.newLine();

      // OnGVT
      tgs.append("bool OnGVT(unsigned int me, void *snapshot)");
      tgs.newLine();
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(c, LINKS.termination$42K6), LINKS.function$cpRu), LINKS.body$1GE0));
      tgs.newLine();
    }
    tgs.newLine();


    // ProcessEvent
    tgs.append("void ProcessEvent(lp_id_t me, simtime_t now, int event_type, ");
    tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ)));
    tgs.append(" *content, unsigned int size, void *data)");
    tgs.newLine();
    tgs.append("{");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("switch(WHAT_CLASS(me)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.newLine();
      tgs.indent();
      tgs.append("case ");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append(":");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("ProcessEvent");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("(me, now, event_type, content, (");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append(" *)data);");
      tgs.newLine();
      tgs.indent();
      tgs.append("break;");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
    }
    tgs.newLine();
    tgs.indent();
    tgs.append("case classUnknown:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("fprintf(stderr, \"Unknown class!\");");
    tgs.newLine();
    tgs.indent();
    tgs.append("abort();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();



    if (tgs.needPositions()) {
      tgs.fillUnitInfo(UnitConcept__BehaviorDescriptor.getUnitName_id4pl5GY7LKmR.invoke(SNodeOperations.cast(ctx.getPrimaryInput(), CONCEPTS.UnitConcept$1g)));
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink eventType$MGmZ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, 0x2e66f9a613f69c82L, "eventType");
    /*package*/ static final SContainmentLink events$uflG = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x2dc3a69083753b9fL, "events");
    /*package*/ static final SContainmentLink messageStruct$xVlJ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6de6339fa564bed8L, "messageStruct");
    /*package*/ static final SContainmentLink classes$SNAM = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x4117a694e5ba8536L, "classes");
    /*package*/ static final SContainmentLink stateStruct$NqNO = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a2L, "stateStruct");
    /*package*/ static final SContainmentLink commonVariables$AOvb = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x323127c5741c9443L, "commonVariables");
    /*package*/ static final SContainmentLink function$5bPH = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2a9fL, "function");
    /*package*/ static final SContainmentLink body$1GE0 = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body");
    /*package*/ static final SContainmentLink statements$euTV = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad9955L, 0x3a16e3a9c7ad9956L, "statements");
    /*package*/ static final SContainmentLink handlers$Nr2P = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a3L, "handlers");
    /*package*/ static final SContainmentLink termination$42K6 = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x148075313bb9b63dL, "termination");
    /*package*/ static final SContainmentLink function$cpRu = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x148075313bb5466dL, 0x148075313bb5466eL, "function");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty eventName$AHdn = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x3aa70864b453eff1L, "eventName");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept EventDefinition$wO = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, "SimpleDES.structure.EventDefinition");
    /*package*/ static final SConcept ClassDefinition$NR = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, "SimpleDES.structure.ClassDefinition");
    /*package*/ static final SConcept EventHandler$Ov = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, "SimpleDES.structure.EventHandler");
    /*package*/ static final SInterfaceConcept UnitConcept$1g = MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L, "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }
}
