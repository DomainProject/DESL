package Collections.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class NewCollectionFactory {
  public static class NodeFactory_3616715704759710394 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      SNode baseType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x7af69e2e83a1ba36L, "com.mbeddr.core.expressions.structure.Type"));
      {
        final SNode lvd = enclosingNode;
        if (SNodeOperations.isInstanceOf(lvd, CONCEPTS.LocalVariableDeclaration$ft)) {
          {
            final SNode collection = SLinkOperations.getTarget(lvd, LINKS.type$sXU3);
            if (SNodeOperations.isInstanceOf(collection, CONCEPTS.Collection$YT)) {
              baseType = SLinkOperations.getTarget(collection, LINKS.type$eikV);
            }
          }
        }
      }
      {
        final SNode assignment = enclosingNode;
        if (SNodeOperations.isInstanceOf(assignment, CONCEPTS.AssignmentExpr$mZ)) {
          {
            final SNode genericDotExpression = SLinkOperations.getTarget(assignment, LINKS.left$SkXz);
            if (SNodeOperations.isInstanceOf(genericDotExpression, CONCEPTS.GenericDotExpression$uQ)) {
              {
                final SNode memberRef = SLinkOperations.getTarget(genericDotExpression, LINKS.target$CEPF);
                if (SNodeOperations.isInstanceOf(memberRef, CONCEPTS.GenericMemberRef$bk)) {
                  {
                    final SNode collection = SLinkOperations.getTarget(SLinkOperations.getTarget(memberRef, LINKS.member$wUNL), LINKS.type$sXU3);
                    if (SNodeOperations.isInstanceOf(collection, CONCEPTS.Collection$YT)) {
                      baseType = SLinkOperations.getTarget(collection, LINKS.type$eikV);
                    }
                  }
                }
              }
            }
          }
          {
            final SNode localVarRef = SLinkOperations.getTarget(assignment, LINKS.left$SkXz);
            if (SNodeOperations.isInstanceOf(localVarRef, CONCEPTS.LocalVarRef$VQ)) {
              {
                final SNode collection = SLinkOperations.getTarget(SLinkOperations.getTarget(localVarRef, LINKS.var$YUyC), LINKS.type$sXU3);
                if (SNodeOperations.isInstanceOf(collection, CONCEPTS.Collection$YT)) {
                  baseType = SLinkOperations.getTarget(collection, LINKS.type$eikV);
                }
              }
            }
          }
        }
      }

      // the following code only covers the case in which the collection's base type is a struct
      /*
        TODO handle the most generic case, i.e. when baseType is a primitive type (e.g., int, double, ...); in that case, a new struct should be created as the following one:
        struct *collectionName*Element {
            int element;
            struct *collectionName*Element *prev;
            struct *collectionName*Element *next;
        }

      */


      // when a collection of structs is created, we add two new members to the structType, in order to be able to point at the previous and next nodes in the collection
      {
        final SNode structType = baseType;
        if (SNodeOperations.isInstanceOf(structType, CONCEPTS.StructType$B3)) {
          SNode prev = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x51a277741cc50918L, "com.mbeddr.core.udt.structure.Member"));
          SNode next = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x51a277741cc50918L, "com.mbeddr.core.udt.structure.Member"));

          SNode pointerType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366d630L, "com.mbeddr.core.pointers.structure.PointerType"));
          SLinkOperations.setTarget(pointerType, LINKS.baseType$zMGV, SNodeOperations.copyNode(structType));

          SLinkOperations.setTarget(prev, LINKS.type$sXU3, pointerType);
          SLinkOperations.setTarget(next, LINKS.type$sXU3, SNodeOperations.copyNode(pointerType));
          SPropertyOperations.assign(prev, PROPS.name$MnvL, "prev");
          SPropertyOperations.assign(next, PROPS.name$MnvL, "next");

          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(structType, LINKS.struct$WCsg), LINKS.members$C59R)).addElement(prev);
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(structType, LINKS.struct$WCsg), LINKS.members$C59R)).addElement(next);
        }
      }



    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept LocalVariableDeclaration$ft = MetaAdapterFactory.getConcept(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad96e6L, "com.mbeddr.core.statements.structure.LocalVariableDeclaration");
    /*package*/ static final SConcept Collection$YT = MetaAdapterFactory.getConcept(0x99e1808be2d74c11L, 0xa40f23376c03dda3L, 0x6f36cc77d0af8690L, "Collections.structure.Collection");
    /*package*/ static final SConcept AssignmentExpr$mZ = MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x4e85add925440dL, "com.mbeddr.core.expressions.structure.AssignmentExpr");
    /*package*/ static final SConcept GenericDotExpression$uQ = MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x401df715da462c0cL, "com.mbeddr.core.expressions.structure.GenericDotExpression");
    /*package*/ static final SConcept GenericMemberRef$bk = MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x619e8ce80b8d18e4L, "com.mbeddr.core.udt.structure.GenericMemberRef");
    /*package*/ static final SConcept LocalVarRef$VQ = MetaAdapterFactory.getConcept(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x1d0c3765e2e1d67aL, "com.mbeddr.core.statements.structure.LocalVarRef");
    /*package*/ static final SConcept StructType$B3 = MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x58bef62304fc0a38L, "com.mbeddr.core.udt.structure.StructType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$sXU3 = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x46a2a92ac61b183L, 0x46a2a92ac61b184L, "type");
    /*package*/ static final SContainmentLink type$eikV = MetaAdapterFactory.getContainmentLink(0x99e1808be2d74c11L, 0xa40f23376c03dda3L, 0x6f36cc77d0af8690L, 0x6f36cc77d0af8691L, "type");
    /*package*/ static final SContainmentLink left$SkXz = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x7af69e2e83a1ba34L, 0x7af69e2e83a1ba40L, "left");
    /*package*/ static final SContainmentLink target$CEPF = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x401df715da462c0cL, 0x619e8ce80b7ff48bL, "target");
    /*package*/ static final SReferenceLink member$wUNL = MetaAdapterFactory.getReferenceLink(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x619e8ce80b8d18e4L, 0x619e8ce80b8d18e6L, "member");
    /*package*/ static final SReferenceLink var$YUyC = MetaAdapterFactory.getReferenceLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x1d0c3765e2e1d67aL, 0x1d0c3765e2e1fe27L, "var");
    /*package*/ static final SContainmentLink baseType$zMGV = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x6bbcdccef5e46755L, 0x6bbcdccef5e46756L, "baseType");
    /*package*/ static final SReferenceLink struct$WCsg = MetaAdapterFactory.getReferenceLink(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x58bef62304fc0a38L, 0x58bef62304fc0a39L, "struct");
    /*package*/ static final SContainmentLink members$C59R = MetaAdapterFactory.getContainmentLink(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x6285e27d4ff6c9f5L, 0x6285e27d4ff7db92L, "members");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
