package DESL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class EventHandler__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, "DESL.structure.EventHandler");

  public static final SMethod<Void> CreateHandler_id2R3DD23w4Ig = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("CreateHandler").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3297662491777059728L).languageId(0xace4ce3b88117666L, 0xc4765525912b41b9L).build2(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> CreateStateArgument_id6x5yTHtJLeY = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("CreateStateArgument").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7513565052746535870L).languageId(0xace4ce3b88117666L, 0xc4765525912b41b9L).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(CreateHandler_id2R3DD23w4Ig, CreateStateArgument_id6x5yTHtJLeY);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void CreateHandler_id2R3DD23w4Ig(@NotNull SNode __thisNode__, String functionName) {
    SNode newFunction = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, "com.mbeddr.core.modules.structure.Function"));
    SPropertyOperations.assign(newFunction, PROPS.name$MnvL, functionName);
    SLinkOperations.setTarget(__thisNode__, LINKS.function$5bPH, newFunction);

    SNode doubleType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x7b064baaf4444619L, "com.mbeddr.core.expressions.structure.DoubleType"));
    SNode now = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x6d872ef9245a20d7L, "com.mbeddr.core.modules.structure.Argument"));
    SPropertyOperations.assign(now, PROPS.name$MnvL, "now");
    SLinkOperations.setTarget(now, LINKS.type$sXU3, doubleType);
    ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.function$5bPH), LINKS.arguments$6da0)).addElement(now);

    SNode intType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x75739ed9f39e3883L, "com.mbeddr.core.expressions.structure.Int16tType"));
    SNode myself = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x6d872ef9245a20d7L, "com.mbeddr.core.modules.structure.Argument"));
    SPropertyOperations.assign(myself, PROPS.name$MnvL, "MySelf");
    SLinkOperations.setTarget(myself, LINKS.type$sXU3, intType);
    ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.function$5bPH), LINKS.arguments$6da0)).addElement(myself);
  }
  /*package*/ static void CreateStateArgument_id6x5yTHtJLeY(@NotNull SNode __thisNode__, SNode type) {
    if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.function$5bPH), LINKS.arguments$6da0)).where((it) -> SPropertyOperations.getString(it, PROPS.name$MnvL) == "lp_state").isEmpty()) {
      SNode newArgument = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x6d872ef9245a20d7L, "com.mbeddr.core.modules.structure.Argument"));
      SPropertyOperations.assign(newArgument, PROPS.name$MnvL, "lp_state");
      SLinkOperations.setTarget(newArgument, LINKS.type$sXU3, type);
      ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.function$5bPH), LINKS.arguments$6da0)).addElement(newArgument);
    }
  }

  /*package*/ EventHandler__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        CreateHandler_id2R3DD23w4Ig(node, (String) parameters[0]);
        return null;
      case 1:
        CreateStateArgument_id6x5yTHtJLeY(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink function$5bPH = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2a9fL, "function");
    /*package*/ static final SContainmentLink type$sXU3 = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x46a2a92ac61b183L, 0x46a2a92ac61b184L, "type");
    /*package*/ static final SContainmentLink arguments$6da0 = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x707ac195dd5d51f2L, 0x4f39f90935e92f45L, "arguments");
  }
}
