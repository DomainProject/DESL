package Collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AddToCollection;
  private ConceptPresentation props_Collection;
  private ConceptPresentation props_FindFirst;
  private ConceptPresentation props_ForEachItemInCollection;
  private ConceptPresentation props_ForeachBody;
  private ConceptPresentation props_ICollectionDotTarget;
  private ConceptPresentation props_IGetFirstElementInCollection;
  private ConceptPresentation props_NewCollection;
  private ConceptPresentation props_RemoveFirst;
  private ConceptPresentation props_RemoveFromCollection;
  private ConceptPresentation props_VariableReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AddToCollection:
        if (props_AddToCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add");
          props_AddToCollection = cpb.create();
        }
        return props_AddToCollection;
      case LanguageConceptSwitch.Collection:
        if (props_Collection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("collection");
          props_Collection = cpb.create();
        }
        return props_Collection;
      case LanguageConceptSwitch.FindFirst:
        if (props_FindFirst == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("find the first element in a collection that satisfies a condition");
          cpb.rawPresentation("findFirst");
          props_FindFirst = cpb.create();
        }
        return props_FindFirst;
      case LanguageConceptSwitch.ForEachItemInCollection:
        if (props_ForEachItemInCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("foreach");
          props_ForEachItemInCollection = cpb.create();
        }
        return props_ForEachItemInCollection;
      case LanguageConceptSwitch.ForeachBody:
        if (props_ForeachBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ForeachBody");
          props_ForeachBody = cpb.create();
        }
        return props_ForeachBody;
      case LanguageConceptSwitch.ICollectionDotTarget:
        if (props_ICollectionDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICollectionDotTarget = cpb.create();
        }
        return props_ICollectionDotTarget;
      case LanguageConceptSwitch.IGetFirstElementInCollection:
        if (props_IGetFirstElementInCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IGetFirstElementInCollection = cpb.create();
        }
        return props_IGetFirstElementInCollection;
      case LanguageConceptSwitch.NewCollection:
        if (props_NewCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new collection");
          props_NewCollection = cpb.create();
        }
        return props_NewCollection;
      case LanguageConceptSwitch.RemoveFirst:
        if (props_RemoveFirst == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove the first element in a collection that satifies a condition");
          cpb.rawPresentation("removeFirst");
          props_RemoveFirst = cpb.create();
        }
        return props_RemoveFirst;
      case LanguageConceptSwitch.RemoveFromCollection:
        if (props_RemoveFromCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("remove");
          props_RemoveFromCollection = cpb.create();
        }
        return props_RemoveFromCollection;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x99e1808be2d74c11L, 0xa40f23376c03dda3L, 0x1fa1163416d17bbeL, 0x1fa1163416d17bbfL, "variable", "", "");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
    }
    return null;
  }
}
