package SimpleDES.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_DESModel;
  private ConceptPresentation props_EventHandler;
  private ConceptPresentation props_EventType;
  private ConceptPresentation props_ExternalFunction;
  private ConceptPresentation props_ExternalFunctionPrototype;
  private ConceptPresentation props_FunctionDocs;
  private ConceptPresentation props_Handler;
  private ConceptPresentation props_IDocs;
  private ConceptPresentation props_IExternalFunction;
  private ConceptPresentation props_NewStruct;
  private ConceptPresentation props_ParameterDocs;
  private ConceptPresentation props_SendEvent;
  private ConceptPresentation props_StartupFunction;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DESModel:
        if (props_DESModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DESModel = cpb.create();
        }
        return props_DESModel;
      case LanguageConceptSwitch.EventHandler:
        if (props_EventHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4644f902f2f0d238L, 0x2dc3a690837ac751L, "event", "", "");
          props_EventHandler = cpb.create();
        }
        return props_EventHandler;
      case LanguageConceptSwitch.EventType:
        if (props_EventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventType = cpb.create();
        }
        return props_EventType;
      case LanguageConceptSwitch.ExternalFunction:
        if (props_ExternalFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExternalFunction = cpb.create();
        }
        return props_ExternalFunction;
      case LanguageConceptSwitch.ExternalFunctionPrototype:
        if (props_ExternalFunctionPrototype == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExternalFunctionPrototype");
          props_ExternalFunctionPrototype = cpb.create();
        }
        return props_ExternalFunctionPrototype;
      case LanguageConceptSwitch.FunctionDocs:
        if (props_FunctionDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6579f899e5d7c058L, 0x6579f899e5d7c091L, "function", "", "");
          props_FunctionDocs = cpb.create();
        }
        return props_FunctionDocs;
      case LanguageConceptSwitch.Handler:
        if (props_Handler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Handler = cpb.create();
        }
        return props_Handler;
      case LanguageConceptSwitch.IDocs:
        if (props_IDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDocs = cpb.create();
        }
        return props_IDocs;
      case LanguageConceptSwitch.IExternalFunction:
        if (props_IExternalFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IExternalFunction = cpb.create();
        }
        return props_IExternalFunction;
      case LanguageConceptSwitch.NewStruct:
        if (props_NewStruct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new struct");
          props_NewStruct = cpb.create();
        }
        return props_NewStruct;
      case LanguageConceptSwitch.ParameterDocs:
        if (props_ParameterDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6579f899e5d7c060L, 0x6579f899e5f274c0L, "parameter", "", "");
          props_ParameterDocs = cpb.create();
        }
        return props_ParameterDocs;
      case LanguageConceptSwitch.SendEvent:
        if (props_SendEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendEvent");
          props_SendEvent = cpb.create();
        }
        return props_SendEvent;
      case LanguageConceptSwitch.StartupFunction:
        if (props_StartupFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StartupFunction");
          props_StartupFunction = cpb.create();
        }
        return props_StartupFunction;
    }
    return null;
  }
}
