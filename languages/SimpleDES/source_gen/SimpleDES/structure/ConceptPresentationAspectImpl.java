package SimpleDES.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ClassDefinition;
  private ConceptPresentation props_CreateArray;
  private ConceptPresentation props_DESModel;
  private ConceptPresentation props_DocsEntry;
  private ConceptPresentation props_DocsM2M;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_EventDefinition;
  private ConceptPresentation props_EventDocs;
  private ConceptPresentation props_EventHandler;
  private ConceptPresentation props_EventHandlerDocs;
  private ConceptPresentation props_EventType;
  private ConceptPresentation props_Expent;
  private ConceptPresentation props_ExternalFunction;
  private ConceptPresentation props_ExternalFunctionPrototype;
  private ConceptPresentation props_ExternalMacro;
  private ConceptPresentation props_ExternalStructDefinition;
  private ConceptPresentation props_FunctionDocs;
  private ConceptPresentation props_GetReceiver;
  private ConceptPresentation props_GlobalVarDecl;
  private ConceptPresentation props_Header;
  private ConceptPresentation props_IClassDefinition;
  private ConceptPresentation props_IDocs;
  private ConceptPresentation props_IDocsElement;
  private ConceptPresentation props_IEventDefinition;
  private ConceptPresentation props_IExternalFunction;
  private ConceptPresentation props_IFiller;
  private ConceptPresentation props_IGlobalVarDecl;
  private ConceptPresentation props_IHandler;
  private ConceptPresentation props_IMacro;
  private ConceptPresentation props_IProcessAllocation;
  private ConceptPresentation props_IProcessList;
  private ConceptPresentation props_IStartupFunction;
  private ConceptPresentation props_IStructDefinition;
  private ConceptPresentation props_ITerminationFunction;
  private ConceptPresentation props_IText;
  private ConceptPresentation props_ITypeDefinition;
  private ConceptPresentation props_InitRandomContext;
  private ConceptPresentation props_InitTopology;
  private ConceptPresentation props_InitializeState;
  private ConceptPresentation props_Item;
  private ConceptPresentation props_ItemList;
  private ConceptPresentation props_MacroFunction;
  private ConceptPresentation props_MacroVariable;
  private ConceptPresentation props_NewStruct;
  private ConceptPresentation props_ParameterDocs;
  private ConceptPresentation props_PlainText;
  private ConceptPresentation props_ProcessAllocation;
  private ConceptPresentation props_ProcessArray;
  private ConceptPresentation props_ProcessSequence;
  private ConceptPresentation props_Random;
  private ConceptPresentation props_ReleaseStruct;
  private ConceptPresentation props_RootSimM2M;
  private ConceptPresentation props_RossM2M;
  private ConceptPresentation props_SendEvent;
  private ConceptPresentation props_StartupFunction;
  private ConceptPresentation props_StartupHandler;
  private ConceptPresentation props_StructDefinition;
  private ConceptPresentation props_StructDocs;
  private ConceptPresentation props_StructMemberDocs;
  private ConceptPresentation props_TerminationFunction;
  private ConceptPresentation props_TypeDefinition;
  private ConceptPresentation props_UseM2M;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ClassDefinition:
        if (props_ClassDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassDefinition = cpb.create();
        }
        return props_ClassDefinition;
      case LanguageConceptSwitch.CreateArray:
        if (props_CreateArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CreateArray");
          props_CreateArray = cpb.create();
        }
        return props_CreateArray;
      case LanguageConceptSwitch.DESModel:
        if (props_DESModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DESModel = cpb.create();
        }
        return props_DESModel;
      case LanguageConceptSwitch.DocsEntry:
        if (props_DocsEntry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Documentation");
          props_DocsEntry = cpb.create();
        }
        return props_DocsEntry;
      case LanguageConceptSwitch.DocsM2M:
        if (props_DocsM2M == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DocsM2M = cpb.create();
        }
        return props_DocsM2M;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLine");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.EventDefinition:
        if (props_EventDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EventDefinition");
          props_EventDefinition = cpb.create();
        }
        return props_EventDefinition;
      case LanguageConceptSwitch.EventDocs:
        if (props_EventDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c83L, 0x2e66f9a613f69cbaL, "event", "", "");
          props_EventDocs = cpb.create();
        }
        return props_EventDocs;
      case LanguageConceptSwitch.EventHandler:
        if (props_EventHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EventHandler");
          props_EventHandler = cpb.create();
        }
        return props_EventHandler;
      case LanguageConceptSwitch.EventHandlerDocs:
        if (props_EventHandlerDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EventHandlerDocs");
          props_EventHandlerDocs = cpb.create();
        }
        return props_EventHandlerDocs;
      case LanguageConceptSwitch.EventType:
        if (props_EventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventType = cpb.create();
        }
        return props_EventType;
      case LanguageConceptSwitch.Expent:
        if (props_Expent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get an exponentially distributed random value");
          cpb.rawPresentation("Expent");
          props_Expent = cpb.create();
        }
        return props_Expent;
      case LanguageConceptSwitch.ExternalFunction:
        if (props_ExternalFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExternalFunction = cpb.create();
        }
        return props_ExternalFunction;
      case LanguageConceptSwitch.ExternalFunctionPrototype:
        if (props_ExternalFunctionPrototype == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExternalFunctionPrototype");
          props_ExternalFunctionPrototype = cpb.create();
        }
        return props_ExternalFunctionPrototype;
      case LanguageConceptSwitch.ExternalMacro:
        if (props_ExternalMacro == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExternalMacro = cpb.create();
        }
        return props_ExternalMacro;
      case LanguageConceptSwitch.ExternalStructDefinition:
        if (props_ExternalStructDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExternalStructDefinition = cpb.create();
        }
        return props_ExternalStructDefinition;
      case LanguageConceptSwitch.FunctionDocs:
        if (props_FunctionDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6579f899e5d7c058L, 0x6579f899e5d7c091L, "function", "", "");
          props_FunctionDocs = cpb.create();
        }
        return props_FunctionDocs;
      case LanguageConceptSwitch.GetReceiver:
        if (props_GetReceiver == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GetReceiver");
          props_GetReceiver = cpb.create();
        }
        return props_GetReceiver;
      case LanguageConceptSwitch.GlobalVarDecl:
        if (props_GlobalVarDecl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GlobalVarDecl = cpb.create();
        }
        return props_GlobalVarDecl;
      case LanguageConceptSwitch.Header:
        if (props_Header == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Header");
          props_Header = cpb.create();
        }
        return props_Header;
      case LanguageConceptSwitch.IClassDefinition:
        if (props_IClassDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IClassDefinition = cpb.create();
        }
        return props_IClassDefinition;
      case LanguageConceptSwitch.IDocs:
        if (props_IDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDocs = cpb.create();
        }
        return props_IDocs;
      case LanguageConceptSwitch.IDocsElement:
        if (props_IDocsElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDocsElement = cpb.create();
        }
        return props_IDocsElement;
      case LanguageConceptSwitch.IEventDefinition:
        if (props_IEventDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEventDefinition = cpb.create();
        }
        return props_IEventDefinition;
      case LanguageConceptSwitch.IExternalFunction:
        if (props_IExternalFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IExternalFunction = cpb.create();
        }
        return props_IExternalFunction;
      case LanguageConceptSwitch.IFiller:
        if (props_IFiller == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IFiller = cpb.create();
        }
        return props_IFiller;
      case LanguageConceptSwitch.IGlobalVarDecl:
        if (props_IGlobalVarDecl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IGlobalVarDecl = cpb.create();
        }
        return props_IGlobalVarDecl;
      case LanguageConceptSwitch.IHandler:
        if (props_IHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHandler = cpb.create();
        }
        return props_IHandler;
      case LanguageConceptSwitch.IMacro:
        if (props_IMacro == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMacro = cpb.create();
        }
        return props_IMacro;
      case LanguageConceptSwitch.IProcessAllocation:
        if (props_IProcessAllocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IProcessAllocation = cpb.create();
        }
        return props_IProcessAllocation;
      case LanguageConceptSwitch.IProcessList:
        if (props_IProcessList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IProcessList = cpb.create();
        }
        return props_IProcessList;
      case LanguageConceptSwitch.IStartupFunction:
        if (props_IStartupFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStartupFunction = cpb.create();
        }
        return props_IStartupFunction;
      case LanguageConceptSwitch.IStructDefinition:
        if (props_IStructDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStructDefinition = cpb.create();
        }
        return props_IStructDefinition;
      case LanguageConceptSwitch.ITerminationFunction:
        if (props_ITerminationFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITerminationFunction = cpb.create();
        }
        return props_ITerminationFunction;
      case LanguageConceptSwitch.IText:
        if (props_IText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IText = cpb.create();
        }
        return props_IText;
      case LanguageConceptSwitch.ITypeDefinition:
        if (props_ITypeDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeDefinition = cpb.create();
        }
        return props_ITypeDefinition;
      case LanguageConceptSwitch.InitRandomContext:
        if (props_InitRandomContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("initialize the rand context field in state");
          cpb.rawPresentation("InitRandomContext");
          props_InitRandomContext = cpb.create();
        }
        return props_InitRandomContext;
      case LanguageConceptSwitch.InitTopology:
        if (props_InitTopology == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InitTopology");
          props_InitTopology = cpb.create();
        }
        return props_InitTopology;
      case LanguageConceptSwitch.InitializeState:
        if (props_InitializeState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("initialize state for the current LP");
          cpb.rawPresentation("InitState");
          props_InitializeState = cpb.create();
        }
        return props_InitializeState;
      case LanguageConceptSwitch.Item:
        if (props_Item == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Item");
          props_Item = cpb.create();
        }
        return props_Item;
      case LanguageConceptSwitch.ItemList:
        if (props_ItemList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ItemList");
          props_ItemList = cpb.create();
        }
        return props_ItemList;
      case LanguageConceptSwitch.MacroFunction:
        if (props_MacroFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MacroFunction = cpb.create();
        }
        return props_MacroFunction;
      case LanguageConceptSwitch.MacroVariable:
        if (props_MacroVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MacroVariable = cpb.create();
        }
        return props_MacroVariable;
      case LanguageConceptSwitch.NewStruct:
        if (props_NewStruct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new struct");
          props_NewStruct = cpb.create();
        }
        return props_NewStruct;
      case LanguageConceptSwitch.ParameterDocs:
        if (props_ParameterDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6579f899e5d7c060L, 0x6579f899e5f274c0L, "parameter", "", "");
          props_ParameterDocs = cpb.create();
        }
        return props_ParameterDocs;
      case LanguageConceptSwitch.PlainText:
        if (props_PlainText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PlainText");
          props_PlainText = cpb.create();
        }
        return props_PlainText;
      case LanguageConceptSwitch.ProcessAllocation:
        if (props_ProcessAllocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProcessAllocation");
          props_ProcessAllocation = cpb.create();
        }
        return props_ProcessAllocation;
      case LanguageConceptSwitch.ProcessArray:
        if (props_ProcessArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProcessArray");
          props_ProcessArray = cpb.create();
        }
        return props_ProcessArray;
      case LanguageConceptSwitch.ProcessSequence:
        if (props_ProcessSequence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProcessSequence");
          props_ProcessSequence = cpb.create();
        }
        return props_ProcessSequence;
      case LanguageConceptSwitch.Random:
        if (props_Random == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get a random number");
          cpb.rawPresentation("Random");
          props_Random = cpb.create();
        }
        return props_Random;
      case LanguageConceptSwitch.ReleaseStruct:
        if (props_ReleaseStruct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ReleaseStruct");
          props_ReleaseStruct = cpb.create();
        }
        return props_ReleaseStruct;
      case LanguageConceptSwitch.RootSimM2M:
        if (props_RootSimM2M == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RootSimM2M = cpb.create();
        }
        return props_RootSimM2M;
      case LanguageConceptSwitch.RossM2M:
        if (props_RossM2M == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RossM2M = cpb.create();
        }
        return props_RossM2M;
      case LanguageConceptSwitch.SendEvent:
        if (props_SendEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendEvent");
          props_SendEvent = cpb.create();
        }
        return props_SendEvent;
      case LanguageConceptSwitch.StartupFunction:
        if (props_StartupFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StartupFunction");
          props_StartupFunction = cpb.create();
        }
        return props_StartupFunction;
      case LanguageConceptSwitch.StartupHandler:
        if (props_StartupHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StartupHandler");
          props_StartupHandler = cpb.create();
        }
        return props_StartupHandler;
      case LanguageConceptSwitch.StructDefinition:
        if (props_StructDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StructDefinition");
          props_StructDefinition = cpb.create();
        }
        return props_StructDefinition;
      case LanguageConceptSwitch.StructDocs:
        if (props_StructDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StructDocs");
          props_StructDocs = cpb.create();
        }
        return props_StructDocs;
      case LanguageConceptSwitch.StructMemberDocs:
        if (props_StructMemberDocs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StructMemberDocs");
          props_StructMemberDocs = cpb.create();
        }
        return props_StructMemberDocs;
      case LanguageConceptSwitch.TerminationFunction:
        if (props_TerminationFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TerminationFunction");
          props_TerminationFunction = cpb.create();
        }
        return props_TerminationFunction;
      case LanguageConceptSwitch.TypeDefinition:
        if (props_TypeDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TypeDefinition = cpb.create();
        }
        return props_TypeDefinition;
      case LanguageConceptSwitch.UseM2M:
        if (props_UseM2M == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UseM2M = cpb.create();
        }
        return props_UseM2M;
    }
    return null;
  }
}
