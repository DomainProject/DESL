package SimpleDES.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.core.modules.behavior.ITypeDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.traceable.behavior.UnitConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class RootSimM2M_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.createUnitInfo();

    // headers
    List<String> headers = ListSequence.fromList(new ArrayList<String>());
    tgs.append("#include <ROOT-Sim.h>");
    tgs.newLine();
    tgs.append("#include <stdio.h>");
    tgs.newLine();
    tgs.append("#include <stdlib.h>");
    tgs.newLine();
    tgs.append("#include <list.h>");
    tgs.newLine();
    ListSequence.fromList(headers).addElement("ROOT-Sim");
    ListSequence.fromList(headers).addElement("stdio");
    ListSequence.fromList(headers).addElement("stdlib");

    for (final SNode externalFunction : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.externalFunctions$LqEg), CONCEPTS.ExternalFunctionPrototype$V4))) {
      if (isEmptyString(ListSequence.fromList(headers).findFirst((it) -> it.equals(SPropertyOperations.getString(externalFunction, PROPS.headerName$Qm9Y))))) {
        ListSequence.fromList(headers).addElement(SPropertyOperations.getString(externalFunction, PROPS.headerName$Qm9Y));
        tgs.append("#include <");
        tgs.append(SPropertyOperations.getString(externalFunction, PROPS.headerName$Qm9Y));
        tgs.append(".h>");
        tgs.newLine();
      }
    }
    for (final SNode externalStruct : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.structs$JAXN), CONCEPTS.ExternalStructDefinition$8P))) {
      if (isEmptyString(ListSequence.fromList(headers).findFirst((it) -> it.equals(SPropertyOperations.getString(externalStruct, PROPS.headerName$Tdv1))))) {
        ListSequence.fromList(headers).addElement(SPropertyOperations.getString(externalStruct, PROPS.headerName$Tdv1));
        tgs.append("#include <");
        tgs.append(SPropertyOperations.getString(externalStruct, PROPS.headerName$Tdv1));
        tgs.append(".h>");
        tgs.newLine();
      }
    }
    for (final SNode externalMacro : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.macros$Sq68), CONCEPTS.ExternalMacro$H2))) {
      if (isEmptyString(ListSequence.fromList(headers).findFirst((it) -> it.equals(SPropertyOperations.getString(externalMacro, PROPS.headerName$vMtZ))))) {
        ListSequence.fromList(headers).addElement(SPropertyOperations.getString(externalMacro, PROPS.headerName$vMtZ));
        tgs.append("#include <");
        tgs.append(SPropertyOperations.getString(externalMacro, PROPS.headerName$vMtZ));
        tgs.append(".h>");
        tgs.newLine();
      }
    }
    tgs.newLine();

    // events
    tgs.append("/* EVENT TYPES */");
    tgs.newLine();
    for (SNode event : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.events$uflG), CONCEPTS.EventDefinition$wO))) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "FINI" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_FINI") {
        tgs.append("#define ");
        tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL));
        tgs.append(" ");
        tgs.append(String.valueOf(1 + SNodeOperations.getIndexInParent(event)));
        tgs.newLine();
      }
    }
    tgs.newLine();

    // macros
    tgs.append("#define malloc rs_malloc");
    tgs.newLine();

    for (SNode constant : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.macros$Sq68), CONCEPTS.MacroVariable$z9))) {
      tgs.appendNode(constant);
    }
    tgs.newLine();
    for (SNode constant : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.macros$Sq68), CONCEPTS.MacroFunction$$7))) {
      tgs.appendNode(constant);
    }
    tgs.newLine();

    tgs.append("enum class { ");
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append(", ");
    }
    tgs.append("classUnknown };");
    tgs.newLine();
    tgs.newLine();

    // WHAT_CLASS macro
    tgs.append("#define WHAT_CLASS(id) ");
    tgs.append("(");
    for (SNode allocation : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.processAllocations$cuUJ), CONCEPTS.ProcessAllocation$5Z))) {
      tgs.appendNode(allocation);
      tgs.append(" : ");
    }
    tgs.append("classUnknown)");
    tgs.newLine();
    tgs.newLine();

    // structs state
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.appendNode(SLinkOperations.getTarget(c, LINKS.state$NqNO));
      tgs.newLine();
    }

    // structs
    for (SNode struct : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.structs$JAXN), CONCEPTS.StructDefinition$7R))) {
      tgs.appendNode(struct);
      tgs.newLine();
    }


    // global variables
    for (SNode globalVariable : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.configuration$XHIx), CONCEPTS.GlobalVarDecl$PV))) {
      tgs.appendNode(globalVariable);
    }
    tgs.newLine();


    // external functions definitions
    for (SNode function : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.externalFunctions$LqEg), CONCEPTS.ExternalFunction$U_))) {
      tgs.appendNode(function);
      tgs.newLine();
    }
    tgs.newLine();

    // ProcessEvent for each class
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.append("void ProcessEvent");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("(lp_id_t me, simtime_t now, unsigned event_type, const void *content, ");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.state$NqNO)));
      tgs.append("* state)");
      tgs.newLine();
      tgs.append("{");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();

      for (SNode variable : ListSequence.fromList(SLinkOperations.getChildren(c, LINKS.commonVariables$AOvb))) {
        tgs.indent();
        tgs.appendNode(variable);
        tgs.newLine();
      }
      tgs.newLine();

      tgs.indent();
      tgs.append("switch(event_type) {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      for (SNode handler : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(c, LINKS.handlers$Nr2P), CONCEPTS.EventHandler$Ov))) {
        tgs.newLine();
        tgs.indent();
        tgs.append("case ");
        tgs.append(SPropertyOperations.getString(handler, PROPS.eventName$AHdn));
        tgs.append(":");
        tgs.newLine();
        ctx.getBuffer().area().increaseIndent();
        for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(handler, LINKS.function$5bPH), LINKS.body$1GE0), LINKS.statements$euTV))) {
          tgs.indent();
          tgs.appendNode(statement);
          tgs.newLine();
        }
        tgs.indent();
        tgs.append("break;");
        tgs.newLine();
        ctx.getBuffer().area().decreaseIndent();
      }

      tgs.newLine();
      tgs.indent();
      tgs.append("default:");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("fprintf(stderr, \"Unknown event type! (me = %ld - event type = %d)\", me, event_type);");
      tgs.newLine();
      tgs.indent();
      tgs.append("abort();");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();

      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      tgs.append("}");
      tgs.newLine();
    }
    tgs.newLine();

    // ProcessEvent
    tgs.append("void ProcessEvent(lp_id_t me, simtime_t now, unsigned event_type, const void *content, void *data)");
    tgs.newLine();
    tgs.append("{");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("switch(WHAT_CLASS(me)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.newLine();
      tgs.indent();
      tgs.append("case ");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append(":");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("ProcessEvent");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("(me, now, event_type, content, (");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.state$NqNO)));
      tgs.append(" *)data);");
      tgs.newLine();
      tgs.indent();
      tgs.append("break;");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
    }
    tgs.newLine();
    tgs.indent();
    tgs.append("case classUnknown:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("fprintf(stderr, \"Unknown class!\");");
    tgs.newLine();
    tgs.indent();
    tgs.append("abort();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    // simulation_configuration

    int lps = 0;
    for (SNode allocation : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.processAllocations$cuUJ), CONCEPTS.ProcessAllocation$5Z))) {
      {
        final SNode interval = SLinkOperations.getTarget(allocation, LINKS.processes$hZqx);
        if (SNodeOperations.isInstanceOf(interval, CONCEPTS.ProcessArray$Ux)) {
          lps += (SPropertyOperations.getInteger(interval, PROPS.right$2uAQ) - SPropertyOperations.getInteger(interval, PROPS.left$2u8O) + 1);
        }
      }
      {
        final SNode sequence = SLinkOperations.getTarget(allocation, LINKS.processes$hZqx);
        if (SNodeOperations.isInstanceOf(sequence, CONCEPTS.ProcessSequence$B$)) {
          lps += ListSequence.fromList(SLinkOperations.getChildren(sequence, LINKS.processes$2JvY)).count();
        }
      }
    }

    tgs.append("struct simulation_configuration conf = {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append(".lps = ");
    tgs.append(String.valueOf(lps));
    tgs.append(",");
    tgs.newLine();
    tgs.indent();
    tgs.append(".n_threads = 0,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".gvt_period = 1000,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".log_level = LOG_INFO,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".stats_file = \"");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("_stats\",");
    tgs.newLine();
    tgs.indent();
    tgs.append(".ckpt_interval = 0,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".core_binding = true,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".serial = false,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".dispatcher = ProcessEvent");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("};");
    tgs.newLine();
    tgs.newLine();

    // main
    tgs.append("int main(int argc, char **argv)");
    tgs.newLine();
    tgs.append("{");
    tgs.newLine();
    SNode startupFunction = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.startup$LlvU)).findFirst((it) -> SNodeOperations.isInstanceOf(it, CONCEPTS.StartupFunction$EL)), CONCEPTS.StartupFunction$EL);
    ctx.getBuffer().area().increaseIndent();
    for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(startupFunction, LINKS.function$Ah6u), LINKS.body$1GE0), LINKS.statements$euTV))) {
      tgs.indent();
      tgs.appendNode(statement);
      tgs.newLine();
    }
    tgs.indent();
    tgs.append("RootsimInit(&conf);");
    tgs.newLine();
    tgs.indent();
    tgs.append("return RootsimRun();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    if (tgs.needPositions()) {
      tgs.fillUnitInfo(UnitConcept__BehaviorDescriptor.getUnitName_id4pl5GY7LKmR.invoke(SNodeOperations.cast(ctx.getPrimaryInput(), CONCEPTS.UnitConcept$1g)));
    }
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.isEmpty();
  }

  private static final class PROPS {
    /*package*/ static final SProperty headerName$Qm9Y = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0c6228cL, 0x5808433cc4903a50L, "headerName");
    /*package*/ static final SProperty headerName$Tdv1 = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x5808433cc497c579L, 0x5808433cc4a5e3ceL, "headerName");
    /*package*/ static final SProperty headerName$vMtZ = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x28a47bf149ea91f0L, 0x28a47bf149ea91f2L, "headerName");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty eventName$AHdn = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x3aa70864b453eff1L, "eventName");
    /*package*/ static final SProperty right$2uAQ = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, 0x4117a694e648678cL, "right");
    /*package*/ static final SProperty left$2u8O = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, 0x4117a694e648678aL, "left");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink externalFunctions$LqEg = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6f36cc77d0a2c4ceL, "externalFunctions");
    /*package*/ static final SContainmentLink structs$JAXN = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6e7ca07799a0fb0fL, "structs");
    /*package*/ static final SContainmentLink macros$Sq68 = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x74450034d00e6949L, "macros");
    /*package*/ static final SContainmentLink eventType$MGmZ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, 0x2e66f9a613f69c82L, "eventType");
    /*package*/ static final SContainmentLink events$uflG = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x2dc3a69083753b9fL, "events");
    /*package*/ static final SContainmentLink classes$SNAM = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x4117a694e5ba8536L, "classes");
    /*package*/ static final SContainmentLink processAllocations$cuUJ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x4117a694e6409a0eL, "processAllocations");
    /*package*/ static final SContainmentLink state$NqNO = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a2L, "state");
    /*package*/ static final SContainmentLink configuration$XHIx = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x3507db05f7c55ff1L, "configuration");
    /*package*/ static final SContainmentLink commonVariables$AOvb = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x323127c5741c9443L, "commonVariables");
    /*package*/ static final SContainmentLink function$5bPH = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2a9fL, "function");
    /*package*/ static final SContainmentLink body$1GE0 = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body");
    /*package*/ static final SContainmentLink statements$euTV = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad9955L, 0x3a16e3a9c7ad9956L, "statements");
    /*package*/ static final SContainmentLink handlers$Nr2P = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a3L, "handlers");
    /*package*/ static final SContainmentLink processes$hZqx = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6393783L, 0x4117a694e6393787L, "processes");
    /*package*/ static final SContainmentLink processes$2JvY = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e64867a6L, 0x4117a694e64867a7L, "processes");
    /*package*/ static final SContainmentLink startup$LlvU = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6f36cc77d0a2c4cdL, "startup");
    /*package*/ static final SContainmentLink function$Ah6u = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0a48d39L, 0x6f36cc77d0a48d3aL, "function");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExternalFunctionPrototype$V4 = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0c6228cL, "SimpleDES.structure.ExternalFunctionPrototype");
    /*package*/ static final SConcept ExternalStructDefinition$8P = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x5808433cc497c579L, "SimpleDES.structure.ExternalStructDefinition");
    /*package*/ static final SConcept ExternalMacro$H2 = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x28a47bf149ea91f0L, "SimpleDES.structure.ExternalMacro");
    /*package*/ static final SConcept EventDefinition$wO = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, "SimpleDES.structure.EventDefinition");
    /*package*/ static final SConcept MacroVariable$z9 = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x74450034d00e6945L, "SimpleDES.structure.MacroVariable");
    /*package*/ static final SConcept MacroFunction$$7 = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x74450034d00e6947L, "SimpleDES.structure.MacroFunction");
    /*package*/ static final SConcept ClassDefinition$NR = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, "SimpleDES.structure.ClassDefinition");
    /*package*/ static final SConcept ProcessAllocation$5Z = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6393783L, "SimpleDES.structure.ProcessAllocation");
    /*package*/ static final SConcept StructDefinition$7R = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x5808433cc497c577L, "SimpleDES.structure.StructDefinition");
    /*package*/ static final SConcept GlobalVarDecl$PV = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4ba181fb0880155eL, "SimpleDES.structure.GlobalVarDecl");
    /*package*/ static final SConcept ExternalFunction$U_ = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0c6228bL, "SimpleDES.structure.ExternalFunction");
    /*package*/ static final SConcept EventHandler$Ov = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, "SimpleDES.structure.EventHandler");
    /*package*/ static final SConcept ProcessArray$Ux = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, "SimpleDES.structure.ProcessArray");
    /*package*/ static final SConcept ProcessSequence$B$ = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e64867a6L, "SimpleDES.structure.ProcessSequence");
    /*package*/ static final SConcept StartupFunction$EL = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0a48d39L, "SimpleDES.structure.StartupFunction");
    /*package*/ static final SInterfaceConcept UnitConcept$1g = MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L, "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }
}
