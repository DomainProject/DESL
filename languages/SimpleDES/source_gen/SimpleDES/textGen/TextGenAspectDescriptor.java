package SimpleDES.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import SimpleDES.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ClassDefinition:
        return new ClassDefinition_TextGen();
      case LanguageConceptSwitch.CreateArray:
        return new CreateArray_TextGen();
      case LanguageConceptSwitch.DocsEntry:
        return new DocsEntry_TextGen();
      case LanguageConceptSwitch.DocsM2M:
        return new DocsM2M_TextGen();
      case LanguageConceptSwitch.EmptyLine:
        return new EmptyLine_TextGen();
      case LanguageConceptSwitch.EventDefinition:
        return new EventDefinition_TextGen();
      case LanguageConceptSwitch.EventDocs:
        return new EventDocs_TextGen();
      case LanguageConceptSwitch.EventHandler:
        return new EventHandler_TextGen();
      case LanguageConceptSwitch.EventHandlerDocs:
        return new EventHandlerDocs_TextGen();
      case LanguageConceptSwitch.Expent:
        return new Expent_TextGen();
      case LanguageConceptSwitch.ExternalFunctionPrototype:
        return new ExternalFunctionPrototype_TextGen();
      case LanguageConceptSwitch.ExternalStructDefinition:
        return new ExternalStructDefinition_TextGen();
      case LanguageConceptSwitch.FunctionDocs:
        return new FunctionDocs_TextGen();
      case LanguageConceptSwitch.GetReceiver:
        return new GetReceiver_TextGen();
      case LanguageConceptSwitch.Header:
        return new Header_TextGen();
      case LanguageConceptSwitch.InitRandomContext:
        return new InitRandomContext_TextGen();
      case LanguageConceptSwitch.InitTopology:
        return new InitTopology_TextGen();
      case LanguageConceptSwitch.InitializeState:
        return new InitializeState_TextGen();
      case LanguageConceptSwitch.Item:
        return new Item_TextGen();
      case LanguageConceptSwitch.ItemList:
        return new ItemList_TextGen();
      case LanguageConceptSwitch.NewStruct:
        return new NewStruct_TextGen();
      case LanguageConceptSwitch.ParameterDocs:
        return new ParameterDocs_TextGen();
      case LanguageConceptSwitch.PlainText:
        return new PlainText_TextGen();
      case LanguageConceptSwitch.ProcessAllocation:
        return new ProcessAllocation_TextGen();
      case LanguageConceptSwitch.ProcessArray:
        return new ProcessArray_TextGen();
      case LanguageConceptSwitch.Random:
        return new Random_TextGen();
      case LanguageConceptSwitch.ReleaseStruct:
        return new ReleaseStruct_TextGen();
      case LanguageConceptSwitch.RootSimM2M:
        return new RootSimM2M_TextGen();
      case LanguageConceptSwitch.RossM2M:
        return new RossM2M_TextGen();
      case LanguageConceptSwitch.SendEvent:
        return new SendEvent_TextGen();
      case LanguageConceptSwitch.StartupFunction:
        return new StartupFunction_TextGen();
      case LanguageConceptSwitch.StructDefinition:
        return new StructDefinition_TextGen();
      case LanguageConceptSwitch.TerminationFunction:
        return new TerminationFunction_TextGen();
      case LanguageConceptSwitch.UseM2M:
        return new UseM2M_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.DocsM2M$wA)) {
        String fname = getFileName_DocsM2M(root);
        String ext = getFileExtension_DocsM2M(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.RootSimM2M$x5)) {
        String fname = getFileName_RootSimM2M(root);
        String ext = getFileExtension_RootSimM2M(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.UseM2M$UU)) {
        String fname = getFileName_UseM2M(root);
        String ext = getFileExtension_UseM2M(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.RossM2M$aQ)) {
        String fname = getFileName_RossM2M(root);
        String ext = getFileExtension_RossM2M(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_DocsM2M(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileName_RootSimM2M(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL) + "_rootsim";
  }
  private static String getFileName_UseM2M(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL) + "_use";
  }
  private static String getFileName_RossM2M(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL) + "_ross";
  }
  private static String getFileExtension_DocsM2M(SNode node) {
    return "md";
  }
  private static String getFileExtension_RootSimM2M(SNode node) {
    return "c";
  }
  private static String getFileExtension_UseM2M(SNode node) {
    return "c";
  }
  private static String getFileExtension_RossM2M(SNode node) {
    return "c";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DocsM2M$wA = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a61334f362L, "SimpleDES.structure.DocsM2M");
    /*package*/ static final SConcept RootSimM2M$x5 = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a61334f363L, "SimpleDES.structure.RootSimM2M");
    /*package*/ static final SConcept UseM2M$UU = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4111dd2682dce668L, "SimpleDES.structure.UseM2M");
    /*package*/ static final SConcept RossM2M$aQ = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x7dd219cad75cd6eeL, "SimpleDES.structure.RossM2M");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
