package SimpleDES.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.core.modules.behavior.ITypeDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.traceable.behavior.UnitConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class RossM2M_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.createUnitInfo();
    // headers
    List<String> headers = ListSequence.fromList(new ArrayList<String>());
    tgs.append("#include <ross.h>");
    tgs.newLine();
    ListSequence.fromList(headers).addElement("ross");
    Headers.headers(ctx.getPrimaryInput(), headers, ctx);

    // events
    for (SNode event : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.events$uflG), CONCEPTS.EventDefinition$wO))) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_INIT" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "FINI" && SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_FINI") {
        tgs.append("#define ");
        tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL));
        tgs.append(" ");
        tgs.append(String.valueOf(1 + SNodeOperations.getIndexInParent(event)));
        tgs.newLine();
      }
    }
    tgs.newLine();

    // macros
    Macros.macros(ctx.getPrimaryInput(), ctx);

    // state structs
    StateStructs.stateStructs(ctx.getPrimaryInput(), ctx);

    // structs
    Structs.structs(ctx.getPrimaryInput(), ctx);

    /*
      events enum and message struct, foreach class
      (ROSS requires the event type to be explicit in the received message, 
      in order to handle different event types) 

    */

    tgs.append("typedef enum {");
    tgs.newLine();
    for (SNode event : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.events$uflG), CONCEPTS.EventDefinition$wO))) {
      ctx.getBuffer().area().increaseIndent();
      if (SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "INIT" || SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL) != "LP_INIT") {
        tgs.indent();
        tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(event, LINKS.eventType$MGmZ), PROPS.name$MnvL));
        tgs.append(",");
        tgs.newLine();
      }
      ctx.getBuffer().area().decreaseIndent();
    }
    tgs.append("} ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("_EVENT_TYPE;");
    tgs.newLine();
    tgs.newLine();

    tgs.append("struct ");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ), PROPS.name$MnvL));
    tgs.append("{");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("_EVENT_TYPE event_type;");
    tgs.newLine();
    for (SNode member : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ), LINKS.members$C59R))) {
      tgs.indent();
      tgs.appendNode(member);
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();


    // global variables
    Configuration.configuration(ctx.getPrimaryInput(), ctx);

    // external functions definition
    ExternalFunctions.externalFunctions(ctx.getPrimaryInput(), ctx);


    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {

      // init function ( {node.name}_{class.name}_init(...) )

      SNode initHandler = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(c, LINKS.handlers$Nr2P), CONCEPTS.EventHandler$Ov)).findFirst((it) -> SPropertyOperations.getString(it, PROPS.eventName$AHdn) == "INIT" || SPropertyOperations.getString(it, PROPS.eventName$AHdn) == "LP_INIT");

      tgs.append("void ");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_init(");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append(" *s, tw_lp *lp)");
      tgs.newLine();
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(initHandler, LINKS.function$5bPH), LINKS.body$1GE0));

      /*
        determine if a pre_run handler must be defined (i.e., if the INIT event handler
        includes a SendEvent statement with receiver != me) 

      */

      SNode sendToSomeoneElse = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(initHandler, LINKS.function$5bPH), LINKS.body$1GE0), LINKS.statements$euTV), CONCEPTS.SendEvent$u)).where((it) -> SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, LINKS.to$WtFs), CONCEPTS.ArgumentRef$iE) && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it, LINKS.to$WtFs), CONCEPTS.ArgumentRef$iE), LINKS.arg$WIp5), PROPS.name$MnvL) == "me").first();

      if ((sendToSomeoneElse != null)) {
        // todo pre_run handler (all the message definition statements should be moved from the INIT handler to the pre_run handler as well), maybe it would be simpler not to let the user send events to other LPs in the INIT handler
      }
      tgs.newLine();

      // generic event handler ( {node.name}_{node.class}_event(...) )
      tgs.append("void ");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_event(");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append("*s, tw_bf *bf, ");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ)));
      tgs.append(" *msg, tw_lp *lp)");
      tgs.newLine();
      tgs.append("{");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("switch(msg->event_type) {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      for (SNode handler : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(c, LINKS.handlers$Nr2P), CONCEPTS.EventHandler$Ov))) {
        tgs.newLine();
        tgs.indent();
        tgs.append("case ");
        tgs.append(SPropertyOperations.getString(handler, PROPS.eventName$AHdn));
        tgs.append(":");
        tgs.newLine();
        ctx.getBuffer().area().increaseIndent();
        for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(handler, LINKS.function$5bPH), LINKS.body$1GE0), LINKS.statements$euTV))) {
          tgs.indent();
          tgs.appendNode(statement);
          tgs.newLine();
        }
        tgs.indent();
        tgs.append("break;");
        tgs.newLine();
        ctx.getBuffer().area().decreaseIndent();
      }

      tgs.newLine();
      tgs.indent();
      tgs.append("default:");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("fprintf(stderr, \"Unknown event type! (event type = %d)\", msg->event_type);");
      tgs.newLine();
      tgs.indent();
      tgs.append("abort();");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      tgs.append("}");
      tgs.newLine();
      tgs.newLine();

      // finalize function ( {node.name}_{node.class}_final(...) )
      // todo it needs to be at least defined, tbd if it's useful
      tgs.append("void ");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_final(");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append(" *s, tw_lp *lp) {}");
      tgs.newLine();

      tgs.newLine();
    }


    // enum lpTypes (classes)
    tgs.append("typedef enum {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.indent();
      tgs.append("TYPE_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.newLine();
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("} lpTypes;");
    tgs.newLine();
    tgs.newLine();

    // lpTypeMapper function
    tgs.append("tw_lpid lpTypeMapper(tw_lpid gid)");
    tgs.newLine();
    tgs.append("{");
    ctx.getBuffer().area().increaseIndent();
    for (SNode allocation : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.processAllocations$cuUJ), CONCEPTS.ProcessAllocation$5Z))) {
      SNode array = SNodeOperations.cast(SLinkOperations.getTarget(allocation, LINKS.processes$hZqx), CONCEPTS.ProcessArray$Ux);
      tgs.indent();
      tgs.append("if (gid >= ");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(array, PROPS.left$2u8O)));
      tgs.append(" && gid <= ");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(array, PROPS.right$2uAQ)));
      tgs.append(")");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("return TYPE_");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(allocation, LINKS.class$8$vc), PROPS.name$MnvL));
      tgs.append(";");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    // model_lps array
    tgs.append("tw_lptype model_lps[] = {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode c : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.classes$SNAM), CONCEPTS.ClassDefinition$NR))) {
      tgs.indent();
      tgs.append("{");
      tgs.newLine();
      tgs.indent();
      tgs.append("(init_f)");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_init");
      tgs.newLine();
      // pre_run is not considered atm
      tgs.indent();
      tgs.append("(pre_run_f) NULL");
      tgs.newLine();
      tgs.indent();
      tgs.append("(event_f)");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_event");
      tgs.newLine();
      // todo implement reverse events (?)
      tgs.indent();
      tgs.append("(revent_f) NULL");
      tgs.newLine();
      tgs.indent();
      tgs.append("(commit_f) NULL");
      tgs.newLine();
      tgs.indent();
      tgs.append("(final_f)");
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
      tgs.append("_");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("_final");
      tgs.newLine();
      // use LINEAR or ROUND-ROBIN mapping
      tgs.indent();
      tgs.append("(map_f) NULL");
      tgs.newLine();
      tgs.indent();
      tgs.append("sizeof(");
      tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(c, LINKS.stateStruct$NqNO)));
      tgs.append(")");
      tgs.newLine();
      tgs.indent();
      tgs.append("},");
      tgs.newLine();
    }
    tgs.indent();
    tgs.append("{ 0 },");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("};");
    tgs.newLine();
    tgs.newLine();

    // get the total number of LPs
    int lps = 0;
    for (SNode allocation : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.processAllocations$cuUJ), CONCEPTS.ProcessAllocation$5Z))) {
      {
        final SNode interval = SLinkOperations.getTarget(allocation, LINKS.processes$hZqx);
        if (SNodeOperations.isInstanceOf(interval, CONCEPTS.ProcessArray$Ux)) {
          lps += (SPropertyOperations.getInteger(interval, PROPS.right$2uAQ) - SPropertyOperations.getInteger(interval, PROPS.left$2u8O) + 1);
        }
      }
      {
        final SNode sequence = SLinkOperations.getTarget(allocation, LINKS.processes$hZqx);
        if (SNodeOperations.isInstanceOf(sequence, CONCEPTS.ProcessSequence$B$)) {
          lps += ListSequence.fromList(SLinkOperations.getChildren(sequence, LINKS.processes$2JvY)).count();
        }
      }
    }

    // main function
    tgs.append("int main(int argc, char **argv)");
    tgs.newLine();
    tgs.append("{");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("tw_init(&argc, &argv);");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("// define LP-to-PE mapping");
    tgs.newLine();
    tgs.indent();
    tgs.append("g_tw_mapping = LINEAR;");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("// define the number of LPs per PE");
    tgs.newLine();
    tgs.indent();
    tgs.append("g_tw_nlp = ");
    tgs.append(String.valueOf(lps));
    tgs.newLine();
    tgs.indent();
    tgs.append("unsigned int custom_lps_per_pe = g_tw_nlp/tw_nnodes();");
    tgs.newLine();
    tgs.newLine();


    tgs.indent();
    tgs.append("// set model_lps");
    tgs.newLine();
    tgs.indent();
    tgs.append("g_tw_lp_types = model_lps;");
    tgs.newLine();
    tgs.indent();
    tgs.append("tw_define_lps(custom_lps_per_pe, sizeof(");
    tgs.appendNode(ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.messageStruct$xVlJ)));
    tgs.append("));");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("tw_lp_setup_types();");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("tw_run();");
    tgs.newLine();
    tgs.indent();
    tgs.append("tw_end();");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("return 0;");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();




    if (tgs.needPositions()) {
      tgs.fillUnitInfo(UnitConcept__BehaviorDescriptor.getUnitName_id4pl5GY7LKmR.invoke(SNodeOperations.cast(ctx.getPrimaryInput(), CONCEPTS.UnitConcept$1g)));
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink eventType$MGmZ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, 0x2e66f9a613f69c82L, "eventType");
    /*package*/ static final SContainmentLink events$uflG = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x2dc3a69083753b9fL, "events");
    /*package*/ static final SContainmentLink messageStruct$xVlJ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6de6339fa564bed8L, "messageStruct");
    /*package*/ static final SContainmentLink members$C59R = MetaAdapterFactory.getContainmentLink(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x6285e27d4ff6c9f5L, 0x6285e27d4ff7db92L, "members");
    /*package*/ static final SContainmentLink handlers$Nr2P = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a3L, "handlers");
    /*package*/ static final SContainmentLink stateStruct$NqNO = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, 0x4117a694e5b8c1a2L, "stateStruct");
    /*package*/ static final SContainmentLink function$5bPH = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2a9fL, "function");
    /*package*/ static final SContainmentLink body$1GE0 = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body");
    /*package*/ static final SContainmentLink statements$euTV = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad9955L, 0x3a16e3a9c7ad9956L, "statements");
    /*package*/ static final SContainmentLink to$WtFs = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x68458b9b5da4ec77L, 0x6f2af7ea6983412cL, "to");
    /*package*/ static final SReferenceLink arg$WIp5 = MetaAdapterFactory.getReferenceLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x1d0c3765e2e7d0baL, 0x1d0c3765e2e7d0bbL, "arg");
    /*package*/ static final SContainmentLink classes$SNAM = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x4117a694e5ba8536L, "classes");
    /*package*/ static final SContainmentLink processes$hZqx = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6393783L, 0x4117a694e6393787L, "processes");
    /*package*/ static final SReferenceLink class$8$vc = MetaAdapterFactory.getReferenceLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6393783L, 0x4117a694e6394c33L, "class");
    /*package*/ static final SContainmentLink processAllocations$cuUJ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x4117a694e6409a0eL, "processAllocations");
    /*package*/ static final SContainmentLink processes$2JvY = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e64867a6L, 0x4117a694e64867a7L, "processes");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty eventName$AHdn = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x3aa70864b453eff1L, "eventName");
    /*package*/ static final SProperty left$2u8O = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, 0x4117a694e648678aL, "left");
    /*package*/ static final SProperty right$2uAQ = MetaAdapterFactory.getProperty(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, 0x4117a694e648678cL, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept EventDefinition$wO = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, "SimpleDES.structure.EventDefinition");
    /*package*/ static final SConcept EventHandler$Ov = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, "SimpleDES.structure.EventHandler");
    /*package*/ static final SConcept SendEvent$u = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x68458b9b5da4ec77L, "SimpleDES.structure.SendEvent");
    /*package*/ static final SConcept ArgumentRef$iE = MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x1d0c3765e2e7d0baL, "com.mbeddr.core.modules.structure.ArgumentRef");
    /*package*/ static final SConcept ClassDefinition$NR = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e5b8c1a0L, "SimpleDES.structure.ClassDefinition");
    /*package*/ static final SConcept ProcessArray$Ux = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6486788L, "SimpleDES.structure.ProcessArray");
    /*package*/ static final SConcept ProcessAllocation$5Z = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e6393783L, "SimpleDES.structure.ProcessAllocation");
    /*package*/ static final SConcept ProcessSequence$B$ = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x4117a694e64867a6L, "SimpleDES.structure.ProcessSequence");
    /*package*/ static final SInterfaceConcept UnitConcept$1g = MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L, "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }
}
