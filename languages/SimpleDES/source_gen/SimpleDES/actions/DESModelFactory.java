package SimpleDES.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DESModelFactory {
  public static class NodeFactory_3297662491776892432 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      /*
        <type> <var>;
        ExpressionStatement
        <type> <var>; 
        ExpressionStatement 
        ExpressionStatement
        <type> <var>;
        ExpressionStatement
        ExpressionStatement

      */


      // Create Topology opaque type
      SNode topologyTypeDecl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x2fdc4aa2eaa02L, "com.mbeddr.core.udt.structure.OpaqueTypeDecl"));
      SPropertyOperations.assign(topologyTypeDecl, PROPS.name$MnvL, "topology");
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.opaqueTypes$lHSV)).addElement(topologyTypeDecl);

      // Create Bitmap opaque type
      SNode bitmapOpaqueType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x2fdc4aa2eaa02L, "com.mbeddr.core.udt.structure.OpaqueTypeDecl"));
      SPropertyOperations.assign(bitmapOpaqueType, PROPS.name$MnvL, "bitmap");
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.opaqueTypes$lHSV)).addElement(bitmapOpaqueType);



    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink event$5cyK = MetaAdapterFactory.getReferenceLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2aa2L, "event");
    /*package*/ static final SContainmentLink eventType$MGmZ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, 0x2e66f9a613f69c82L, "eventType");
    /*package*/ static final SContainmentLink events$uflG = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x2dc3a69083753b9fL, "events");
    /*package*/ static final SContainmentLink opaqueTypes$lHSV = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6f36cc77d0d825c5L, "opaqueTypes");
  }
}
