package SimpleDES.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import SimpleDES.behavior.EventHandler__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.core.modules.behavior.ITypeDeclaration__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DESModelFactory {
  public static class NodeFactory_3297662491776892432 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      SNode newEventType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x7c2c5977e3e10df9L, "SimpleDES.structure.EventType"));
      SPropertyOperations.assign(newEventType, PROPS.name$MnvL, "INIT");
      SNode newEventHandler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, "SimpleDES.structure.EventHandler"));
      SLinkOperations.setTarget(newEventHandler, LINKS.event$5cyK, newEventType);
      EventHandler__BehaviorDescriptor.CreateHandler_id2R3DD23w4Ig.invoke(newEventHandler, "handler_" + SPropertyOperations.getString(newEventType, PROPS.name$MnvL));
      SNode eventDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, "SimpleDES.structure.EventDefinition"));
      SLinkOperations.setTarget(eventDefinition, LINKS.eventType$MGmZ, newEventType);
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.events$uflG)).addElement(eventDefinition);
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.eventHandlers$XNOV)).addElement(newEventHandler);

      // Create Topology opaque type
      SNode topologyTypeDecl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x2fdc4aa2eaa02L, "com.mbeddr.core.udt.structure.OpaqueTypeDecl"));
      SPropertyOperations.assign(topologyTypeDecl, PROPS.name$MnvL, "Topology");
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.opaqueTypes$lHSV)).addElement(topologyTypeDecl);

      // Create Bitmap opaque type
      SNode bitmapOpaqueType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x2fdc4aa2eaa02L, "com.mbeddr.core.udt.structure.OpaqueTypeDecl"));
      SPropertyOperations.assign(bitmapOpaqueType, PROPS.name$MnvL, "Bitmap");
      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.opaqueTypes$lHSV)).addElement(bitmapOpaqueType);

      SNode topologyFunction = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e0L, "com.mbeddr.core.modules.structure.FunctionPrototype"));
      SPropertyOperations.assign(topologyFunction, PROPS.name$MnvL, "GetReceiversFromTopology");
      SNode topologyArg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x6d872ef9245a20d7L, "com.mbeddr.core.modules.structure.Argument"));
      SNode pointer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366d630L, "com.mbeddr.core.pointers.structure.PointerType"));
      SLinkOperations.setTarget(pointer, LINKS.baseType$zMGV, ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(topologyTypeDecl));
      SLinkOperations.setTarget(topologyArg, LINKS.type$sXU3, pointer);
      SPropertyOperations.assign(topologyArg, PROPS.name$MnvL, "topology");
      ListSequence.fromList(SLinkOperations.getChildren(topologyFunction, LINKS.arguments$6da0)).addElement(topologyArg);
      SNode intCollection = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x99e1808be2d74c11L, 0xa40f23376c03dda3L, 0x6f36cc77d0af8690L, "Collections.structure.Collection"));
      SLinkOperations.setTarget(intCollection, LINKS.type$eikV, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x75739ed9f39e3883L, "com.mbeddr.core.expressions.structure.Int16tType")));
      SLinkOperations.setTarget(topologyFunction, LINKS.type$sXU3, intCollection);

      SNode topologyPrototype = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0c6228cL, "SimpleDES.structure.ExternalFunctionPrototype"));
      SLinkOperations.setTarget(topologyPrototype, LINKS.prototype$lY0a, topologyFunction);

      ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.externalFunctions$LqEg)).addElement(topologyPrototype);
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink event$5cyK = MetaAdapterFactory.getReferenceLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2dc3a690836fd0d0L, 0x74d88000543a2aa2L, "event");
    /*package*/ static final SContainmentLink eventType$MGmZ = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x2e66f9a613f69c80L, 0x2e66f9a613f69c82L, "eventType");
    /*package*/ static final SContainmentLink events$uflG = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x2dc3a69083753b9fL, "events");
    /*package*/ static final SContainmentLink eventHandlers$XNOV = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x3507db05f7c55ff6L, "eventHandlers");
    /*package*/ static final SContainmentLink opaqueTypes$lHSV = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6f36cc77d0d825c5L, "opaqueTypes");
    /*package*/ static final SContainmentLink baseType$zMGV = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x6bbcdccef5e46755L, 0x6bbcdccef5e46756L, "baseType");
    /*package*/ static final SContainmentLink type$sXU3 = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x46a2a92ac61b183L, 0x46a2a92ac61b184L, "type");
    /*package*/ static final SContainmentLink arguments$6da0 = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x707ac195dd5d51f2L, 0x4f39f90935e92f45L, "arguments");
    /*package*/ static final SContainmentLink type$eikV = MetaAdapterFactory.getContainmentLink(0x99e1808be2d74c11L, 0xa40f23376c03dda3L, 0x6f36cc77d0af8690L, 0x6f36cc77d0af8691L, "type");
    /*package*/ static final SContainmentLink prototype$lY0a = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x6f36cc77d0c6228cL, 0x6f36cc77d0d15795L, "prototype");
    /*package*/ static final SContainmentLink externalFunctions$LqEg = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x6f36cc77d0a2c4ceL, "externalFunctions");
  }
}
