package SimpleDES.listeners;

/*Generated by MPS */

import com.mbeddr.mpsutil.modellisteners.runtime.IModelListenersDescriptor;
import com.mbeddr.mpsutil.modellisteners.runtime.IModelListener;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.mbeddr.mpsutil.modellisteners.runtime.PropertyListener;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import SimpleDES.behavior.EventHandler__BehaviorDescriptor;
import com.mbeddr.core.modules.behavior.ITypeDeclaration__BehaviorDescriptor;
import com.mbeddr.mpsutil.modellisteners.runtime.ChildListener;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class ModelListenersDescriptor implements IModelListenersDescriptor {
  public ModelListenersDescriptor() {
  }

  public Iterable<IModelListener> getListeners() {
    List<IModelListener> listeners = ListSequence.fromList(new ArrayList<IModelListener>());

    ListSequence.fromList(listeners).addElement(new PropertyListener(CONCEPTS.StructDeclaration$ox, PROPS.name$MnvL) {
      @Override
      public void propertyChanged(final SNode instance, String propertyName, String oldValue, String newValue) {
        if (instance == SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(instance, CONCEPTS.DESModel$DK, false, false), LINKS.state$YYuT)) {
          for (SNode handler : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(instance, CONCEPTS.DESModel$DK, false, false), LINKS.eventHandlers$XNOV))) {
            EventHandler__BehaviorDescriptor.CreateStateArgument_id6x5yTHtJLeY.invoke(handler, ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(instance));
          }
        }
      }
    });
    ListSequence.fromList(listeners).addElement(new ChildListener(CONCEPTS.DESModel$DK, LINKS.eventHandlers$XNOV) {
      @Override
      public void childAdded(final SNode instance, final SNode child) {
        EventHandler__BehaviorDescriptor.CreateStateArgument_id6x5yTHtJLeY.invoke(child, ITypeDeclaration__BehaviorDescriptor.createType_id3o2OLGv7CoR.invoke(SLinkOperations.getTarget(instance, LINKS.state$YYuT)));
      }
    });

    return listeners;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StructDeclaration$ox = MetaAdapterFactory.getConcept(0xefda956e491e4f00L, 0xba1436af2f213ecfL, 0x58bef62304fc0a2fL, "com.mbeddr.core.udt.structure.StructDeclaration");
    /*package*/ static final SConcept DESModel$DK = MetaAdapterFactory.getConcept(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, "SimpleDES.structure.DESModel");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink state$YYuT = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x68458b9b5dbb0c16L, "state");
    /*package*/ static final SContainmentLink eventHandlers$XNOV = MetaAdapterFactory.getContainmentLink(0xc4765525912b41b9L, 0xace4ce3b88117666L, 0x1ada9a09174c9630L, 0x3507db05f7c55ff6L, "eventHandlers");
  }
}
